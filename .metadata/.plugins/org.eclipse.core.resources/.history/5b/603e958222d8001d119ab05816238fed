package com.order.service.impl;

import java.time.LocalDateTime;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collector;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.order.feinClient.ItemClient;
import com.order.model.Order;
import com.order.payloads.CommonApiResponse;
import com.order.payloads.ItemDto;
import com.order.payloads.OrderDto;
import com.order.repository.OrderRepository;
import com.order.service.OrderService;

@Service
public class OrderServiceImpl implements OrderService {

	@Autowired
	private OrderRepository orderRepository;

	@Autowired
	private ModelMapper modelMapper;

	@Autowired
	private ObjectMapper objectMapper;

	@Autowired
	private ItemClient itemClient;

	@Override
	public CommonApiResponse addOrder(OrderDto orderDto) {

		ItemDto itemDto = null;

		Order order = modelMapper.map(orderDto, Order.class);

		order = orderRepository.save(order);

		orderDto = modelMapper.map(order, OrderDto.class);

		CommonApiResponse apiResponse = itemClient.getItemById(orderDto.getItem_id()).getBody();

		Object data = apiResponse.getData();

		if (data != null && data instanceof LinkedHashMap) {
			@SuppressWarnings("unchecked")
			LinkedHashMap<Object, Object> map = (LinkedHashMap<Object, Object>) data;

			ObjectMapper mapper = new ObjectMapper();
			itemDto = mapper.convertValue(map, ItemDto.class);

			System.out.println(itemDto.getClass() + " " + itemDto);
		}

		orderDto.setItem(itemDto);

		return CommonApiResponse.builder().data(orderDto).time(LocalDateTime.now()).status(HttpStatus.CREATED).build();
	}

	@Override
	public CommonApiResponse getAllOrders() {
		List<Order> allOrders = orderRepository.findAll();

		OrderDto[] ordersDtos = modelMapper.map(allOrders, OrderDto[].class);

			List<?> allItems =	(List<?>) itemClient.getAllItems().getBody().getData();
			
			List<ItemDto> allItemDtos = (List<ItemDto>) allItems.stream().map(t -> {
				return  objectMapper.convertValue(t, ItemDto.class);
			}).collect(Collectors.toList());
		
		for (OrderDto orderDto : ordersDtos) {
			
			for (ItemDto item : allItemDtos) {
				
				if (orderDto.getItem_id().equals(item.getItemId())) {
					
					orderDto.setItem(item);
				}
			}
		}

		return CommonApiResponse.builder().data(ordersDtos).time(LocalDateTime.now()).status(HttpStatus.OK).build();
	}

	@Override
	public CommonApiResponse getOrderById(Integer oid) {

		Optional<Order> orderOptional = orderRepository.findById(oid);
		if (!orderOptional.isPresent()) {
			return CommonApiResponse.builder().status(HttpStatus.NOT_FOUND).time(LocalDateTime.now()).build();
		}

		OrderDto orderDto = modelMapper.map(orderOptional, OrderDto.class);
		return CommonApiResponse.builder().data(orderDto).status(HttpStatus.OK).time(LocalDateTime.now()).build();
	}

}
