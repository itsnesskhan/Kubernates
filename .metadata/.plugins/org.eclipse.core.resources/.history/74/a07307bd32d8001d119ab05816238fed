package com.order.service.impl;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

import java.time.LocalDateTime;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;

import com.order.payloads.CommonApiResponse;
import com.order.payloads.OrderDto;
import com.order.repository.OrderRepository;
import com.order.service.OrderService;

@ExtendWith(MockitoExtension.class)
class OrderServiceImplTest {

	@InjectMocks
	private OrderService orderService;

	@Mock
	private OrderRepository orderRepository;

	private List<OrderDto> orderDtoList;

	@BeforeEach
	void setUp() throws Exception {

	  OrderDto orderDto = OrderDto.builder().orderDate(LocalDateTime.now()).orderStatus("PENDING").item_id(1).build();
	  OrderDto orderDto2 = OrderDto.builder().orderDate(LocalDateTime.now()).orderStatus("ON THE WAY").item_id(2).build();
	  
	  orderDtoList.add(orderDto);
	  orderDtoList.add(orderDto2);
	}

	@Test
	void testAddOrder() {
		
		
		CommonApiResponse commonApiResponse = CommonApiResponse.builder()
												.data(orderDto)
												.status(HttpStatus.CREATED)
												.time(LocalDateTime.now())
												.build();
		
		when(orderService.addOrder(orderDto)).thenReturn(commonApiResponse);
		
		CommonApiResponse apiResponse = orderService.addOrder(orderDto);
		
		assertEquals(HttpStatus.CREATED, apiResponse.getStatus());
		assertThat(apiResponse.getData()).isNotNull();
	}

	@Test
	void testGetAllOrders() {
		
		
	}

	@Test
	void testGetOrderById() {
		fail("Not yet implemented");
	}

	@Test
	void testUpdateOrder() {
		fail("Not yet implemented");
	}

	@Test
	void testDeleteOrder() {
		fail("Not yet implemented");
	}

}
