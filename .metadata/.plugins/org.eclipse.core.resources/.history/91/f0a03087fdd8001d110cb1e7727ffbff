package com.item.contorller;

import static org.junit.jupiter.api.Assertions.fail;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.List;

import org.hamcrest.Matchers;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import com.item.model.Item;
import com.item.payloads.CommonApiResponse;
import com.item.payloads.ItemDto;
import com.item.service.ItemService;

@WebMvcTest(ItemController.class)
class ItemControllerTest {

	@Autowired
	private MockMvc mockMvc;

	@MockBean
	private ItemService itemService;

	private ItemDto itemDto;

	private Item item;

	@BeforeEach
	void setUp() throws Exception {
		itemDto = ItemDto.builder().itemId(1).itemName("test").cost(100d).quantity(10).build();

		item = Item.builder().itemId(1).itemName("test").cost(100d).quantity(10).build();

	}

	@Test
	void testGetAllItems() {
		
		  ItemDto itemDto2 = ItemDto.builder().itemId(2).itemName("test2").cost(100d).quantity(10).build();
		
		CommonApiResponse apiResponse = CommonApiResponse.builder().data(List.of(itemDto, itemDto2)).status(HttpStatus.CREATED).build();

		when(orderService.getAllOrders()).thenReturn(apiResponse);

		MockHttpServletRequestBuilder request = MockMvcRequestBuilders.get("/api/v1/order/get-all")
				.accept(MediaType.APPLICATION_JSON);
		
		mockMvc.perform(request)
		.andExpect(MockMvcResultMatchers.jsonPath("$.data.size()", Matchers.is(2)))
        .andExpect(status().isOk())
		.andReturn();
	}

	@Test
	void testAddItem() {
		fail("Not yet implemented");
	}

	@Test
	void testGetItemById() {
		fail("Not yet implemented");
	}

	@Test
	void testDeleteItemById() {
		fail("Not yet implemented");
	}

}
