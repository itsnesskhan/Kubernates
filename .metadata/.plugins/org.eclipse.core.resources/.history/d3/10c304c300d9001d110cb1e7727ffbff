package com.item.contorller;

import static org.junit.jupiter.api.Assertions.fail;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.List;

import org.hamcrest.Matchers;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.item.model.Item;
import com.item.payloads.CommonApiResponse;
import com.item.payloads.ItemDto;
import com.item.service.ItemService;

@WebMvcTest(ItemController.class)
class ItemControllerTest {

	@Autowired
	private MockMvc mockMvc;

	@MockBean
	private ItemService itemService;

	private ItemDto itemDto;

	private Item item;

	private ObjectMapper objectMapper;

	@BeforeEach
	void setUp() throws Exception {

		objectMapper = new ObjectMapper().registerModule(new JavaTimeModule());

		itemDto = ItemDto.builder().itemId(1).itemName("test").cost(100d).quantity(10).build();

		item = Item.builder().itemId(1).itemName("test").cost(100d).quantity(10).build();

	}

	@Test
	void testGetAllItems() throws Exception {

		ItemDto itemDto2 = ItemDto.builder().itemId(2).itemName("test2").cost(100d).quantity(10).build();

		CommonApiResponse apiResponse = CommonApiResponse.builder().data(List.of(itemDto, itemDto2))
				.status(HttpStatus.CREATED).build();

		when(itemService.getAllItem()).thenReturn(apiResponse);

		MockHttpServletRequestBuilder request = MockMvcRequestBuilders.get("/api/v1/item/get-all")
				.accept(MediaType.APPLICATION_JSON);

		mockMvc.perform(request).andExpect(MockMvcResultMatchers.jsonPath("$.data.size()", Matchers.is(2)))
				.andExpect(status().isOk()).andReturn();
	}

	@Test
	void testAddItem() throws Exception {

		CommonApiResponse apiResponse = CommonApiResponse.builder().data(itemDto).status(HttpStatus.CREATED).build();

		String jsonRequest = objectMapper.writeValueAsString(itemDto);

		when(itemService.addItem(itemDto)).thenReturn(apiResponse);

		new ObjectMapper().registerModule(new JavaTimeModule());

		MockHttpServletRequestBuilder request = MockMvcRequestBuilders.post("/api/v1/item/save").content(jsonRequest)
				.contentType(MediaType.APPLICATION_JSON);

		mockMvc.perform(request)
				.andExpect(MockMvcResultMatchers.jsonPath("$.data.itemName", Matchers.equalTo("test")))
				.andExpect(MockMvcResultMatchers.jsonPath("$.data.quantity", Matchers.equalTo(10)))
				.andExpect(status().isCreated()).andReturn();
	}

	@Test
	void testGetItemByIdExist() throws Exception {
		
		CommonApiResponse apiResponse = CommonApiResponse.builder().data(itemDto).status(HttpStatus.OK).build();
		
		when(itemService.getItemById(1)).thenReturn(apiResponse);
		
		MockHttpServletRequestBuilder request = MockMvcRequestBuilders.get("/api/v1/item/get/1")
				.accept(MediaType.APPLICATION_JSON);

		mockMvc.perform(request)
		.andExpect(MockMvcResultMatchers.jsonPath("$.data.itemId", Matchers.equalTo(1)))
		.andExpect(MockMvcResultMatchers.jsonPath("$.data.itemName", Matchers.equalTo("test")))
		.andExpect(MockMvcResultMatchers.jsonPath("$.data.quantity", Matchers.equalTo(10)))
		.andExpect(status().isOk()).andReturn();


	}
	
	@Test
	void testGetItemByIdNotExist() throws Exception {
		
		CommonApiResponse apiResponse = CommonApiResponse.builder().status(HttpStatus.NOT_FOUND).build();
		
		when(itemService.getItemById(3)).thenReturn(apiResponse);
		
		MockHttpServletRequestBuilder request = MockMvcRequestBuilders.get("/api/v1/item/get/3")
				.accept(MediaType.APPLICATION_JSON);

		mockMvc.perform(request)
		.andExpect(MockMvcResultMatchers.jsonPath("$.status", HttpStatus.NOT_FOUND)).andReturn();


	}

	@Test
	void testDeleteItemById() throws Exception {

		CommonApiResponse apiResponse = CommonApiResponse.builder().data("Item deleted Successfully!").status(HttpStatus.OK).build();
		
		when(itemService.deleteItem(1)).thenReturn(apiResponse);
		
		MockHttpServletRequestBuilder request = MockMvcRequestBuilders.delete("/api/v1/item/delete/1")
				.accept(MediaType.APPLICATION_JSON);
		
		mockMvc.perform(request)
		.andExpect(status().isOk())
		.andExpect(MockMvcResultMatchers.jsonPath("$.data", Matchers.is("Item deleted Successfully!")))
		.andReturn();
	}

}
